import json
import os
import re
import subprocess
import time

from fuzzlog.fuzzlog import FuzzedPkt, FuzzLog
from utils import ae_logger

from .exploiter import Exploiter


class NordicBleExploiter(Exploiter):
    def __init__(
        self,
        *,
        session_id: str,
        run_dir: str,
        fuzzlog: FuzzLog,
        central_hub_port: int,
        target_hub_port: int,
        exploit_timeout: int,
    ) -> None:
        super().__init__(
            session_id=session_id, protocol="ble", board="nordic", fuzzlog=fuzzlog
        )
        self.run_dir = run_dir
        self.central_hub_port = central_hub_port
        self.target_hub_port = target_hub_port
        self.exploit_timeout = exploit_timeout

    def gen_script(self, trial_pkts: list[FuzzedPkt]) -> tuple[str, str]:
        # Return (exploit_name, exploit_path)
        exploit_content = []
        for trial_pkt in trial_pkts:
            exploit_content.append(
                {
                    "type": trial_pkt.type,
                    "layer_name": trial_pkt.filter,
                    "fields": trial_pkt.fuzz_info,
                    "loc": trial_pkt.loc,
                    "iteration": trial_pkt.iteration,
                }
            )

        exploit_name = f"ae_{self.protocol}_{self.board}_w{len(trial_pkts)}_{ '_'.join([str(i.loc) for i in trial_pkts ]) }_{self.session_id}"
        exploit_path = f"/home/user/wdissector/modules/auto-exploiter/greyhound_exploits/{exploit_name}.json"
        with open(exploit_path, "w") as f:
            json.dump(exploit_content, f)

        return exploit_name, exploit_path

    def run_exploit_once(
        self, exploit_name: str, exploit_path: str, target_crash_type: str
    ) -> tuple[bool, str]:
        # restart BLE central and target
        subprocess.run(
            f"/home/user/wdissector/3rd-party/uhubctl/uhubctls -a cycle -p {self.central_hub_port}",
            shell=True,
            stdout=subprocess.PIPE,
        )
        time.sleep(1)

        subprocess.run(
            f"/home/user/wdissector/3rd-party/uhubctl/uhubctls -a cycle -p {self.target_hub_port}",
            shell=True,
            stdout=subprocess.PIPE,
        )
        time.sleep(1.5)

        crash_found = False
        start = time.time()
        prev_dir = os.getcwd()
        os.chdir(self.run_dir)
        process = subprocess.Popen(
            ["python2", "ble_central.py", exploit_path], stdout=subprocess.PIPE
        )

        ae_logger.info(
            f"Running command: '{' '.join(['python2', 'ble_central.py', exploit_path])}'"
        )

        crash_identifier = ""
        for line in process.stdout:
            print(line)
            if time.time() - start > self.exploit_timeout:
                ae_logger.info("Exploit timeout.")
                is_timeout = True
                break
            if b"[CRASH]" in line:
                # magic word or long time since last RX which indicates crash
                # [CRASH] CRASH detected in state INITIATING
                crash_found = True
                find_res = re.findall(rb"\[CRASH\] CRASH detected in state (.*)", line)
                if len(find_res) > 0:
                    crash_identifier = find_res[0].decode()
                break

        process.kill()
        os.chdir(prev_dir)
        return crash_found, crash_identifier
