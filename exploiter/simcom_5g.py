import subprocess
import time

from constants import UHUBCTL_PATH
from fuzzlog.fuzzlog import FuzzLog
from utils import ae_logger

from .oneplus_5g import OnePlus5GExploiter


class SIMCom5GExploiter(OnePlus5GExploiter):
    def __init__(
        self,
        *,
        session_id: str,
        run_dir: str,
        fuzzlog: FuzzLog,
        target_hub_port: int,
        exploit_timeout: int,
        flooding_exploit_timeout: int,
        timeout_exploit_timeout: int,
    ) -> None:
        super().__init__(
            session_id=session_id,
            run_dir=run_dir,
            fuzzlog=fuzzlog,
            modem_timeout=0,
            exploit_timeout=exploit_timeout,
            flooding_exploit_timeout=flooding_exploit_timeout,
            timeout_exploit_timeout=timeout_exploit_timeout,
        )

        self.board = "simcom"
        self.target_hub_port = target_hub_port

    def clean_before_run(self):
        try:
            subprocess.run(
                f"{UHUBCTL_PATH} -a cycle -p {self.target_hub_port}",
                shell=True,
                stdout=subprocess.PIPE,
            )
            # SIMCom need longer time to boot up when previously crashes
            if self.prev_run_exploit_once_trigger_crash:
                time.sleep(24)
            else:
                time.sleep(3)
        except:
            ae_logger.error(
                f"Error when restarting SIMCom target at hub port {self.target_hub_port}",
                exc_info=True,
            )
